#!/usr/bin/env python
import subprocess
import sys
import re
import os
import gzip

bin_path = os.path.dirname(__file__)
split_exe = os.path.join(bin_path, 'split')
bc_exe = os.path.join(bin_path, 'bc')

def main():
    ''' Recursively splits all clusters in voxel-file into 
    individual particles.'''
    if len(sys.argv) != 2:
        print 'segmentation [voxel-file]'
        sys.exit(1)
    else:
        input_file = sys.argv[1] 
        output_file = 'particles-fs.gz'

    # First do a fast-split
    n = fast_split(input_file, output_file)
    split_list = range(1, n+1)
    pfile = output_file
    for i in range(1, 100):
        print 'Iteration {}: {} clusters'.format(i, len(split_list))
        pfile, split_list = split_clusters(pfile, split_list, i)
        if not split_list: 
            break

def split_clusters(input_file, split_list, iteration):
    ''' For particle ids in split list, attempt to segment particles by
    betweenness centrality in input_file.  Writes results to 
    merged-particle file, numbered by the current iteration.'''

    merged_file = 'merged-particles-{}.gz'.format(iteration)
    merged = gzip.open(merged_file, 'wb')
    ct = 0
    next_split = []
    for i in split_list:
        temp_file = 'split-{}.gz'.format(i)
        removed = bc_split(input_file, i, temp_file) 
        # Now merge output clusters into the global file.
        for line in gzip.open(temp_file, 'rb'):
            if line.startswith('begin cluster'):
                ct += 1
                m = re.match('begin cluster; id \d+; size (\d+)\n', line)
                size = m.group(1)
                merged.write('begin cluster; id {}; size {}\n'.format(ct, size))
                if removed > 0:
                    # If particles were removed, then process cluster again.
                    next_split.append(ct)
            else:
                merged.write(line)
        os.remove(temp_file)
    return merged_file, next_split
        
def fast_split(input_file, output_file):
    cmd = [split_exe, input_file, 'particles-fs.gz']
    pid = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out = pid.communicate()[0]
    m = re.search('particles, and (\d+) clusters', out)
    return int(m.group(1))

def bc_split(input_file, i, output_file):
    cmd = [bc_exe, input_file, str(i), output_file]
    pid = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out = pid.communicate()[0]
    m1 = re.search('Removing (\d+) bridging particles', out)
    m2 = re.search('Found (\d+) clusters', out)
    m3 = re.search('Computed centrality in (\S+) seconds', out)
    m4 = re.search('Maximum centrality value is (\S+)\n', out)
    if m1 and m2 and m3 and m4:
        removed = int(m1.group(1))
        nc = int(m2.group(1))
        dt = float(m3.group(1))
        cb = float(m4.group(1))
        msg = '{}: removed {:2d} voxels; found {} clusters; max cb {:.4f}; {:.2f} s'
        print msg.format(i, removed, nc, cb, dt)
        return removed
    else:
        # This shouldn't happen - print out debug info.
        print cmd
        print out

if __name__ == '__main__': main()
